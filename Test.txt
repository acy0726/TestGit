
TensorFlow.js는 JavaScript로 기계 학습 알고리즘을 작성하고 실행하기위한 라이브러리입니다. TensorFlow.js 모델은 웹 브라우저와 Node.js 환경에서 실행됩니다. 이 라이브러리는 TensorFlow 에코 시스템의 일부로 Python과 호환되는 일련의 API를 제공하므로 모델을 Python과 JavaScript 생태계간에 이식 할 수 있습니다. TensorFlow.js는 광범위한 JavaScript 커뮤니티의 새로운 개발자에게 기계 학습 모델을 구축 및 배포하고 새로운 클래스의 온 디바이스 계산을 가능하게했습니다. 이 백서에서는 TensorFlow.js의 디자인, API 및 구현에 대해 설명하고 일부 유익한 사용 사례를 중점적으로 설명합니다.


기계 학습 (ML)은 소프트웨어 시스템에서 중요한 도구가되어 기존 응용 프로그램을 향상시키고 완전히 새로운 응용 프로그램을 가능하게합니다. 그러나 ML 용으로 제공되는 소프트웨어 플랫폼은 학술 및 산업계의 기술 기반을 반영합니다. 프로덕션 수준의 ML 라이브러리는 대개 Python 및 C ++ 개발자 용으로 작성됩니다. 그럼에도 불구하고 프론트 엔드와 백엔드의 광대 한 커뮤니티가 있습니다.
높은 속도로 계속 성장하고있는 JavaScript (JS) 개발자. Python (GitHub.com, 2017)의 1 백만에 비해 2017 년에 JS에 230 만 개의 GitHub 풀 요청이있었습니다. 2018 년 Stack Overflow Developer Survey에 따르면 JS는 가장 일반적으로 사용되는 프로그래밍 언어입니다 (StackOverflow.com, 2018).
이러한 관심 부족은 중요합니다. JS 환경은 새롭고 차별화 된 응용 프로그램 클래스를 지원할 수 있습니다. 온 디바이스 계산은 데이터 프라이버시, 접근성 및 대기 시간이 짧은 대화식 애플리케이션을 비롯한 많은 이점을 제공합니다. JS 개발자 커뮤니티의 역량 강화는 새로운 종류의 애플리케이션으로 이어질 수 있습니다.
이 백서에서는 JS 커뮤니티의 중요성과 ML을위한 웹 기반 응용 프로그램의 중요성에 대한 동기로 TensorFlow.js 라이브러리의 디자인과 개발에 대해 설명합니다.
TensorFlow (Abadi et al., 2016) 생태계의 일류 시민 인이 플랫폼은 JS에 고성능 ML 및 수치 계산 기능을 제공합니다. ML 용 오픈 소스 JS 플랫폼이 여러 개 등장했지만 TensorFlow.js는 브라우저에서 GPU에 대한 통합 된 교육 및 추론을 지원하는 최초의 제품으로 서버 측 배포를위한 완전한 Node.js 통합을 제공합니다. 우리는 TensorFlow.js가 높은 수준의 라이브러리, 포괄적 인 테스트 및 명확한 확장 성을 포함하여 높은 수준의 생산 체제를 갖추도록 노력했습니다. JS 커뮤니티는 이미 상당한 이해를 보았습니다.
우리는 TensorFlow.js를 구축 한 경험의 세 가지 주요 측면에 대해 논의합니다. 첫째, 우리는 JS 환경의 고유 한 문제점과 이점을 설명합니다. 둘째, 표준 웹 개발 실무와 TensorFlow와의 호환성과 JS 환경의 한계를 극복하기 위해 사용한 기술 간의 균형을 나타내는 라이브러리의 디자인 세부 사항, API를 다룹니다. 마지막으로, TensorFlow.js에서 사용할 수있는 몇 가지 흥미 있고 새로운 사용 사례에 대해 설명합니다.

2 배경 및 관련 연구
TensorFlow.js의 디자인은 JS 환경의 특정 제약에 근거합니다. 여기에서는 JS가있는 ML의 기술적 과제와 그에 대한 해결 노력에 대해 자세히 설명합니다.

2.1 자바 스크립트 환경
다른 환경. JS의 과제 중 하나는 다른 환경에서 실행된다는 것입니다. 계산은 서버 측 브라우저에서 클라이언트 측에서 일어날 수 있습니다. 가장 중요한 것은 Node.js 프레임 워크의 일부이며, 최근에는 Electron과 같은 프레임 워크를 통해 데스크톱에서 수행 될 수 있습니다. TensorFlow.js는이 모든 설정에서 작동하도록 설계되었습니다. 현재까지 대부분의 작업이 웹 브라우저에서 클라이언트 측 개발을 위해 조정되었습니다.

공연. 브라우저 환경과 관련된 두 번째 핵심 과제는 성능입니다. JS는 해석 된 언어이므로 일반적으로 C ++이나 Java와 같은 컴파일 된 언어의 속도와 수치 계산을위한 속도가 일치하지 않습니다.
C ++ 라이브러리에 바인딩 할 수있는 Python과 달리 브라우저는이 기능을 제공하지 않습니다. 보안상의 이유로 브라우저 애플리케이션은 GPU에 직접 액세스하지 못합니다. GPU는 일반적으로 최신 심층 학습 시스템에서 수치 계산이 이루어지는 곳입니다.
이러한 성능 문제를 해결하기 위해 몇 가지 새로운 JS 표준이 등장하고 있습니다. 한 가지 주목할만한 해결책은 브라우저에서 직접 해석되고 실행될 수있는 C ++ 프로그램을 바이트 코드로 컴파일하는 방법 인 WebAssembly (Haas et al., 2017)입니다. 특정 작업의 경우 WebAssembly는 일반 JS를 능가 할 수 있습니다. 최신 브라우저는 OpenGL을 JS에 노출시키는 API 인 WebGL (Kronos, 2011)도 지원합니다. OpenGL은 2D 및 3D 벡터 그래픽을 렌더링하기위한 교차 언어, 교차 플랫폼 API로서 게임 및 기타 고성능 렌더링 작업을 웹 페이지에서 직접 수행 할 수있게합니다. 서버 측에서는 JS 라이브러리가 Node.js의 N-API 인터페이스 (Nodejs.org, 2017)를 통해 C 및 C ++로 작성된 기존 기본 모듈에 바인딩 할 수 있습니다.

브라우저 간 호환성. JS는 모든 플랫폼에서 실행되는 응용 프로그램을 쉽게 작성할 수 있도록 표준화 된 웹 API를 사용하여 모든 주요 브라우저에서 지원되는 교차 플랫폼 언어로 설계되었습니다. 실제로 브라우저는 약간 다른 구현과 우선 순위를 가진 여러 벤더에 의해 만들어졌습니다. 예를 들어 크롬과 파이어 폭스가 WebGL 2.0 (WebGL 1.0보다 크게 향상된 기능)을 지원하는 반면, 애플의 사파리는 WebGL 1.0과
WebGPU (Jackson, 2017)와 같은 미래의 기술로 초점을 옮겼습니다. 웹 응용 프로그램 작성자는 자신의 응용 프로그램에서 이러한 불일치를 숨기기 위해 열심히 노력해야하며 대다수의 플랫폼에서 테스트하기 위해 광범위한 테스트 인프라가 필요합니다.

단일 스레드 실행. JS 환경의 다른 문제 중 하나는 단일 스레드 환경입니다. JS에는 웹 페이지 레이아웃, JS 코드, 이벤트 처리 등이 이루어지는 '기본 스레드'( 'UI 스레드'라고도 함)가 있습니다. 이렇게하면 개발 모델의 일부 측면이 크게 단순화되지만 응용 프로그램 개발자는 페이지의 다른 부분이 느려질 수 있으므로 주 스레드를 차단하지 않도록주의해야합니다. 따라서 잘 설계된 JS 라이브러리는 동기식 API의 단순성과 비동기식 API의 비 차단 이점을 조심스럽게 균형을 유지해야합니다.

2.2 브라우저 기반 환경에서의 기회
공유 가능성. TensorFlow.js의 주요 동기는 추가 설치없이 표준 브라우저에서 ML을 실행할 수 있다는 것입니다. TensorFlow.js로 작성된 모델과 응용 프로그램을 웹에서 쉽게 공유 할 수 있으므로 기계 학습을위한 진입 장벽이 낮아집니다. 이것은 교육용 사례와 현장 기여자의 다양성을 높이기 위해 특히 중요합니다.
상호 작용. 기계 학습 관점에서 볼 때, 웹 브라우저의 대화 형 특성과 웹 API의 다양한 기능은 교육 및 연구 목적을 모두 지원할 수있는 다양한 신규 사용자 중심 ML 응용 프로그램의 가능성을 열어줍니다. (Olah, 2014) 및 (Smilkov et al., 2016)과 같은 신경 네트워크의 시각화는 기계 학습의 기본 개념을 가르치는 데 널리 사용되었습니다.
온 - 디바이스 계산. 마지막으로 브라우저의 웹 카메라, 마이크 및 가속도계와 같은 장치 하드웨어의 다양한 구성 요소에 대한 표준화 된 액세스를 통해 ML 모델과 센서 데이터를 쉽게 통합 할 수 있습니다. 이러한 통합의 중요한 결과는 사용자 데이터가 온 - 장치 상태를 유지하고 사용자 개인 정보를 보호 할 수있어 의료, 액세스 가능성 및 개인화 된 ML 도메인에서 응용 프로그램을 사용할 수 있다는 것입니다.
예를 들어, 말하기 장애가있는 사용자는 전화기를 사용하여 오디오 샘플을 수집하여 브라우저에서 개인화 된 모델을 학습 할 수 있습니다. Federated Learning (McMahan et al., 2016)이라는 또 다른 기술을 사용하면 장치가 중요한 데이터를 장치에 보관하면서 중앙 모델을 공동으로 교육 할 수 있습니다. 브라우저는 이러한 유형의 응용 프로그램을위한 자연스러운 플랫폼입니다.


2.3 관련 연구
JS 생태계의 인기와 고유 한 이점을 감안할 때, 많은 오픈 소스 브라우저 기반 ML 라이브러리가 존재한다는 것은 놀랄 일이 아닙니다. 초보자가 신경을 구축하고 훈련시킬 수있는 ConvNetJS (Karpathy, 2014), Synaptic (Cazala, 2014), Brain.js (Plummer, 2010), Mind (Miller, 2015) 및 Neataptic (Wagenaar, 2017) 몇 줄의 코드만으로 네트워크를 구성 할 수 있습니다. 보다 전문화 된 JS ML 라이브러리에는 강화 학습에 중점을 두는 NeuroJS (Huenermann, 2016) 및 REINFORCEjs (Karpathy, 2015)와 같은 NLP 응용 프로그램에 초점을 맞춘 Compromise (Kelly, 2014) 및 Natural (Umbel, 2011)이 포함됩니다. ML.js (Zasso, 2014)는 파이썬 기반의 scikit-learn과 비슷한 ML 유틸리티의보다 일반적인 세트를 제공합니다 (Pedregosa et al.
2011).
이러한 라이브러리는 브라우저의 하드웨어 가속에 대한 액세스를 제공하지 않습니다. 브라우저의 연산 가속은 대화 형 사용 사례 및 최첨단 ML 모델의 대기 시간을 최소화하고 계산 효율성을 위해 중요합니다. 몇몇 라이브러리는 TensorFire (Kwok 등, 2017), Propel (TensorFlow.js 위에 구축 됨) (Dahl, 2017) 및 Keras.js와 같은 하드웨어 가속화를 활용하려고 시도했습니다
(첸, 2016 년), 그러나 더 이상 활발히 유지되지 않는다. WebDNN (Hidaka et al., 2017)은 JS의 또 다른 심층 학습 라이브러리로서 TensorFlow, Keras, PyTorch, Chainer 및 Caffe에서 개발 된 사전 모델을 실행할 수 있습니다. 계산을 가속화하기 위해 WebDNN은 처음에 Apple에서 제안한 기술인 WebGPU (Jackson, 2017)를 사용합니다. WebGPU는 초기 탐색 단계에 있으며 현재 Safari 브라우저의 시험 버전 인 Safari Technology Preview에서만 지원됩니다. 다른 브라우저의 대안으로 WebDNN은 WebAssembly (Haas et al., 2017)를 사용합니다.이 도구는 컴파일 된 C 및 C ++ 코드를 브라우저에서 직접 실행할 수 있습니다.
WebAssembly는 모든 주요 브라우저에서 지원되지만, WebGL 및 WebGPU와 같은 성능을내는 데 필요한 중요한 구성 요소 인 SIMD 지침이 없습니다.



