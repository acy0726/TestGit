우리는 스마트폰의 딥러닝 폭발의 여명에 있다.
연구와 관행의 차이를 메우기 위해 스마트폰 앱이 야생에서 심층 학습을 어떻게 활용하는지 개략적으로 설명하면서 가장 인기 있는 안드로이드 앱 16,500개에 대한 최초의 경험적 연구를 제시한다. 이를 위해 앱을 해부하고 이들의 심층 학습 기능을 분석하는 새로운 정적 툴을 구축한다. 우리의 연구는 세 가지 질문에 답한다: 딥러닝의 얼리 어답터 앱은 무엇인가, 딥러닝은 무엇을 위해 사용하는가, 딥러닝 모델은 어떻게 보이는가. 우리의 연구는 앱 개발자, 스마트폰 판매자, 그리고 딥러닝 R&D에 강한 영향을 미친다. 한편, 우리의 연구결과는 스마트폰에 대한 깊은 학습의 유망한 모습을 그려내며, 모바일 딥러닝 프레임워크의 번영과 딥러닝의 정상에 핵심이 되는 앱의 번영을 보여준다. 한편, 우리의 연구결과는 스마트폰에 구축된 딥러닝 모델에 대한 최적화, 이러한 모델의 보호, 이러한 모델에 대한 연구 아이디어의 검증 등을 촉구한다.

1.
어디서나 볼 수 있는 스마트폰은 최근 몇 년간 모바일 인텔리전스를 향한 핵심 자극인 DL(Deep Learning) 플랫폼 중 가장 유망하다[3, 6, 8, 28]. 이러한 거대 시장은 최신 신경망(NN) 하드웨어의 도입[48, 50, 60, 107], DL 알고리즘의 mprovement[56, 81, 86, 94], 대규모 정보 분석의 침투 증가[52, 57, 83, 85] 등 DL의 지속적인 발전에 의해 주도된다. 연구 커뮤니티는 수많은 DL 기반 소설 앱을 만들었다[46, 72, 73, 80, 87, 106]. 업계도 DL을 모바일 제품에 활용하기 위해 노력해왔다. 예를 들어, 새로 출시된 Android 9 Pie OS에서 Google은 텍스트에서 특정 유형의 엔티티가 감지될 때 클릭 가능한 링크를 추가하는 유용한 API인 Smart Linkify를 활성화하기 위해 작은 피드 포워드 NN 모델을 도입한다[39].

2017년은 스마트폰 DL의 동이 트는 해였다. 거의 동시에 대부분의 주요 공급업체들은 스마트폰용 DL 프레임워크, 즉 모바일 DL 프레임워크를 출시한다. 이 프레임워크는 구글[38] (2017년 11월), 페이스북[9] (2017년 4월), 애플의 코어 ML[12] (2017년 6월), 텐센트[36] (2017년 6월), 바이두[25] (2017년 9월)의 MDL 등이다. 스마트폰으로만 DL 추론을 실행하는 것도 같은 목표다. DL 추론을 스마트폰에서 클라우드로 오프로드한 것에 비해 [2, 20, 22], 기기 내 DL 추론은 사용자의 프라이버시를 더 잘 보호하고, 인터넷 연결이 좋지 않은 상황에서도 계속 작동하며, 앱 작성자가 클라우드에서 DL을 실행하는 데 드는 비용을 지불하지 않도록 한다[48, 67, 70, 71, 71, 73, 78, 107].

DL 프레임워크 폭발에 이어 DL 기법을 채택하는 스마트폰 앱의 첫 물결이 일었다. 이러한 앱과 특히 DL을 사용하는 방법을 이해하는 것이 중요하다고 생각하는데, 이는 그러한 초기 채택자들이 우리의 경우 신기술의 진화를 결정하거나 또는 심지어 결정한다는 것을 역사가 증명했기 때문이다[90] – 스마트폰 DL.

이를 위해 실제 안드로이드 앱이 어떻게 DL 기법을 이용하는지에 대한 최초의 경험적 연구를 제시한다. 본 연구는 DL을 채택한 앱의 특징, DL을 사용하는 용도, DL 모델 등 세 가지 질문에 대한 답을 찾고 있다. 본질적으로, 우리의 연구는 어떻게 DL이 야생과 야생에서 스마트폰 앱에서 사용되고 있는지에 대한 연구 결과를 목표로 한다. 
Mobile DL 연구와 실행 사이의 중요한 격차를 메우는 것, 시사점. 이번 연구를 위해 공식 구글 플레이 시장에서 나온 안드로이드 앱의 대규모 세트를 조사했다. 2018년 6월 초와 2018년 9월 초(3개월 간격으로) 앱 시장의 스냅 사진을 각각 두 장씩 찍는다. 각 스냅샷은 Google Play에 나열된 33개의 범주를 포함하는 가장 인기 있는 앱 16,500개로 구성되어 있다. 우리는 개별 앱을 검사하고 두 개의 스냅샷을 비교함으로써 통찰력을 창출한다. 수많은 안드로이드 앱의 분석을 자동화하기 위해 앱 설치 패키지를 검사하고, DL(이중형 "DL 앱")을 사용하는 앱을 식별하며, 검사를 위해 이들 앱에서 DL 모델을 추출하는 새로운 분석기를 구축한다. 그러한 도구를 실현하기 위해, 우리는 특정 코드 패턴을 찾는 것을 회피하고 대신 대부분의 DL 앱이 DL 프레임워크 위에서 개발된다는 근거에 기초하여 알려진 DL 프레임워크의 사용을 확인한다. 우리의 주요 연구 결과는 다음과 같이 요약된다.

얼리 어답터들은 상위 앱(제4.2조)이다. 우리는 2018년 9월에 수집된 앱 집합에서 211개의 DL 앱을 발견했다. 전체 앱의 1.3%에 불과한 DL앱은 전체 앱 다운로드의 11.9%와 전체 리뷰의 10.5%를 일괄적으로 기여하고 있다. 2018년 9월, 221개의 DL 앱을 약 13,000회 다운로드하여 9,600,000건의 리뷰를 받는다. DL 앱은 빠르게 성장하여 3개월 동안 27%의 증가율을 보이고 있다.

DL은 핵심 빌딩 블록(제4.3조)으로 사용된다. 우리는 81%의 DL 앱이 핵심 기능을 지원하기 위해 DL을 사용하고 있음을 발견한다. 즉, 이러한 앱은 DL을 사용하지 않으면 작동하지 않게 된다. 이러한 DL 앱의 수는 3개월 동안 23% 증가했다.

포토뷰티(Photo veauty)는 상위 사용법(§4.3) DL은 에모지 예측 및 음성 인식과 같이, 우리가 발견한 용도에 의해 확인되는 대로, 다양한 애플리케이션으로 알려져 있다. 이 중 포토뷰티가 가장 많이 사용되는 경우는 94개(44.5%) DL앱이 포토뷰티용으로 DL을 사용하고, 61개(29%) DL앱이 사진 카테고리에서 나왔다.

모바일 DL 프레임워크가 견인력을 얻고 있다(제4.4조) 텐서플로 같은 완전한 DL 프레임워크는 모멘텀으로 인해 여전히 DL 앱들 사이에서 인기가 있는 반면, 제한된 자원에 대해 설계되고 최적화된 DL 프레임워크는 점점 더 인기를 끌고 있다. 예를 들어, TFLite를 사용하는 DL 앱의 수는 3개월 동안 258% 증가했다.

대부분의 DL 모델은 명백한 최적화를 놓친다. (제5.2조) 예를 들어 정확성 손실이 거의 없는 최대 2단계까지 DL 비용을 줄일 수 있는 정량화 같은 잘 알려진 최적화에도 불구하고, 그러한 최적화와 함께 제공되는 DL 모델은 6%에 불과하다[61]. 

온 디바이스 DL은 예상하는 것보다 가볍다.(제5.3조) DL 모델의 동력은 풍부한 매개변수와 깊은 계층에서 나온다는 일반적인 믿음에도 불구하고, 애플리케이션에서 사용되는 DL 모델은 중간 메모리 사용량 2.47MB와 10M FLOPs의 추론 연산으로, 일반적으로 수십 밀리초의 지연을 유발한다. 이러한 모델은 서버의 전체 모델(예: 200MB 메모리 및 4G FLOP의 추론 연산)보다 훨씬 가벼울 뿐만 아니라 스마트폰용으로 특별히 제작된 잘 알려진 모델(예: 54MB 메모리를 가진 MobileNet 및 500M FLOPs 추론 연산)보다 가볍다.

DL 모델은 제대로 보호되지 않는다. (제5.4조) 발견된 모델은 39.2%만 난독화되고 19.2%는 암호화된다.나머지 모델은 추출하기에 사소한 것이므로 무단 재사용이 발생할 수 있다.

시사점 요약: 전반적으로, 우리의 연구 결과는 스마트폰에 DL의 유망한 그림을 그려, 미래의 연구개발에 동기를 부여한다. 특히, 연구결과는 모바일 DL 생태계의 여러 이해당사자들에게 강한 시사점을 보여준다. 앱 개발자들에게: 우리의 연구 결과는 DL이 스마트폰에서 매우 저렴할 수 있다는 것을 보여준다; 개발자들은, 특히 개인이나 소기업은 자신의 앱에 DL을 배치하는 것에 대해 더 확신을 가져야 한다; 관심 있는 개발자들은 모바일 DL 프레임워크 위에 DL 기능을 구축하는 것을 고려해야 한다; 특히 사진술과 같은 몇몇 앱 카테고리는 B가 될 가능성이 가장 높다.DL 기법으로 설명하다 DL 프레임워크 개발자들에게 : 우리의 연구결과는 스마트폰에 최적화된 프레임워크의 지속적인 개발을 장려하고, 우리의 연구결과는 또한 프레임워크의 제1종 관심사로서 모델 보호의 긴급한 필요성을 보여준다. 하드웨어 설계자에게 : 당사의 연구결과는 DL 가속기 설계에 동기를 부여하여 모바일 DL 모델에서 인기 있는 레이어를 우선시한다. DL 연구원들에게: 우리의 연구 결과는 DL 추론을 최적화하기 위한 새로운 제안이 야생에서 스마트폰에 광범위하게 배치되는 것을 보는 경량 모델에서 검증되어야 한다고 제안한다.

요약하면, 우리의 기여는 다음과 같다.
- 우리는 Android 앱에서 DL 채택 분석을 위한 도구를 설계하고 구현한다. Android 앱에서 DL 사용량을 파악하고, 검사를 위해 해당 DL 모델을 추출할 수 있는 툴은 DL용 앱의 자동 분석을 가능하게 한다.

- 우리는 그들의 DL 채택을 위한 16,500개의 Android 앱에 대한 첫 번째 대규모 연구를 수행한다. 경험적 분석을 통해 DL 기법을 채택하는 제1의 물결의 앱에 대해 새로운 발견을 공헌한다. 스마트폰용 DL이 폭발하는 새벽, 우리의 연구결과는 모바일 생태계의 주요 이해 당사자들에게 중요한 의미를 부여하고 스마트폰용 DL의 진화를 조명한다. 우리는 우리의 툴과 데이터셋을 홍보할 계획이다.

그 논문의 나머지 부분은 다음과 같이 정리되어 있다. 우리는 배경 지식과 우리의 동기를 섹션 2에서 설명한다. 우리는 3절에서 DL 사용법을 확인하고 DL 모델을 추출하는 데 도움이 되는 연구 목표와 분석 도구를 제시한다. 우리는 DL 앱과 DL 모델의 분석 결과를 섹션 4와 섹션 5에 각각 제시한다. 우리는 섹션 6에서 제한사항과 가능한 향후 작업에 대해 논의한다. 우리는 섹션 7에서 관련 작업을 조사하고 섹션 8에서 결론을 내린다.


2. BACKGROUND

DL 모델과 프레임워크 DL은 알고리즘 정확도의 상당한 향상을 통해 컴퓨터 시각과 자연 언어 처리 등 많은 AI 과제에 혁신을 가져왔다. 실제로 DL 알고리즘은 2개의 주요 부분으로 배치된다. 첫 번째 모델은 DL 모델로서, 예를 들어 콘볼루션 레이어, 풀링 레이어, 완전 연결 레이어 등 다양한 유형의 뉴런 레이어로 구성되는 경우가 많다. DL 모델은 구성 레이어와 그 조직에 기초해, 예를 들어, 콘볼루션 레이어를 포함하는 CNN(Convolutional Neural Network)과 반복적인 하위 아키텍처를 가진 순차 입력을 처리하는 RNN(Recurrent Neural Network)과 같은 서로 다른 범주로 분류된다. 두 번째 부분은 DL 모델(즉, 교육)을 생산하고 입력 데이터(즉, 추론)를 통해 모델을 실행하는 DL 프레임워크다. 생산 DL 프레임워크에는 엄청난 엔지니어링 노력이 수반되는 경우가 많기 때문에, 대부분의 앱 개발자들은 Google의 TensorFlow와 같은 주요 공급업체의 기존 프레임워크를 이용하는 경향이 있다.

모바일 DL 배포 교육 모델은 데이터와 컴퓨팅 모두에서 집약적이기 때문에[77] 스마트폰 개발자들은 앱 구축 전에 클라우드 서버에 오프라인으로 교육을 모델링하는 데 의존하는 경우가 많다. 앱 설치 시 훈련된 모델은 앱 설치 패키지의 일부로 배포된다. 런타임에 앱은 DL 프레임워크를 호출하여 훈련된 모델과의 추론을 수행하며, 따라서 얼굴 인식, 언어 번역 등의 AI 작업을 실행한다.

추론: 스마트폰에서 DL을 활성화하는 온클라우드 대 온디바이스, 모델 추론을 클라우드로 오프로드하거나 스마트폰에서만 실행할 수 있다. 클라우드로의 오프로딩은 SaaS(Software-as-a-Service, Software-as-a-Service)의 고전적인 사용 사례로, 이전 작업에서 잘 연구되어 왔다[44, 65, 89, 105]. 모바일 기기는 풍부한 데이터 센터 리소스를 서버급 GPU로 투명하게 활용하여 데이터를 업로드하고 추론 결과를 검색한다. 그러나 기기 내 DL 추론은 개인 정보 보호 강화, 인터넷 연결 불량에 대한 복원력, 앱에 대한 클라우드 비용 절감이라는 독특한 장점 때문에 빠르게 인기를 얻고 있다.p 개발자 우리는 신문에 더 많은 증거를 제시할 것이다. 이 작품에서는 스마트폰에 대한 이러한 기기 심층 학습에 실증적 연구를 집중한다.

3가지 좋은 방법
3.1 연구목표
이번 연구의 목표는 스마트폰 앱이 야생에서 DL 기술을 어떻게 활용하고 있는지를 설명하는 것이다. 본 연구는 두 가지 유형의 주제에 초점을 맞추고 있다: i) DL과 ii) DL 프레임워크와 실제 사용되는 모델을 채택하는 스마트폰 앱이다. 따라서, 우리는 앱, 프레임워크, 그리고 모델들을 상징한다. 우리는 각각 4절과 5절에 결과를 제시할 것이다.
Scope Android가 스마트폰 출하량(2018년 2/4분기에 88%)의 대부분을 차지하고, 따라서 전체 스마트폰 앱 인구에 좋은 대용품을 제공하기 때문에, 우리는 분석 내용을 Android 앱에 집중한다[19]. Google Play에서 검색한 데이터 세트 이 작업에 사용된 전체 데이터 세트 저장 Google Play1에서 정의한 33개 카테고리 각각에서 가장 많은 다운로드를 받는 500대 무료 앱으로 구성된 총 16,500개의 앱을 선택한다. 우리는 2018년 6월과 2018년 9월에 서로 다른 순간에 두 개의 데이터셋을 기어다녔다. 두 개의 앱 데이터 세트에 중복된 앱이 2/3 이상 있다. 각 앱에 대해 우리는 apk 파일을 다운로드하고 분석을 위해 Google Play 웹 페이지에서 메타 정보(예: 앱 설명 및 사용자 등급)를 탐색한다. NAT의 분석은 새로운 데이터셋(예: 2018년 9월)과 두 데이터셋 간의 차이(별도로 명시되지 않은 경우)

3.2 워크플로우 개요
우리는 대규모 안드로이드 앱에 대한 연구목표를 가능하게 하는 분석 툴을 설계하고 구현한다. 도구는 그림 1과 같이 반자동 방식으로 작동한다. 분석 도구의 첫 번째 단계는 주어진 안드로이드 앱 세트 중 DL 앱을 입력으로 식별하는 것이다. 이는 DL 스니퍼라는 모듈을 통해 달성된다. DL 스니퍼의 핵심 아이디어는 DL의 사용법을 직접 찾아내는 대신 인기 있는 DL 프레임워크의 사용법을 탐지하는 것이다. DL 앱을 식별한 후 해당 앱에 대한 분석을 수행한다. 분석하는 동안, 툴 apt [4]를 통해 DL 앱에서 추출한 매니페스트 파일을 사용하며, 메타 정보는 해당 Google Play 웹 페이지에서 기어나온다. 매니페스트 파일에는 패키지 이름, 앱 버전, 필요한 권한 등과 같은 정보가 포함된다. 웹 페이지에는 앱 설명, 사용자 등급, 앱 개발자 등의 정보가 포함되어 있다.

분석 도구는 DL 앱에서 DL 모델을 추가로 추출한다. 이 추출은 모델 추출기라는 모듈을 통해 이루어진다. DL 모델을 추출한 후 분석한다. 그러나, 우리는 모델들이 대부분 다른 형식이라는 도전에 직면해 있다. 개발자들은 표준화된 모델[26]을 설계하는 것과 같이 서로 다른 모델 포맷을 통합하는 데 상당한 노력을 투자하고 있지만, DL 프레임워크의 생태계는 여전히 깨지고 단편화되어 있다. 따라서, DL 모델의 내부 구조를 조사할 때, 우리는 실질적으로 다른 프레임워크의 사용 가능한 도구와 소스를 활용한다. 다행히 우리가 조사한 틀(표 2의 세부사항)은 대부분 공개 소스여서 문서화가 잘 되어 있다. DL 스니퍼와 모델 추출기에 대한 자세한 내용은 섹션 4.1과 섹션 5.1에서 각각 설명하십시오.

4 응용 분석
이 섹션에서는 스마트폰 DL 앱에 대한 분석을 소개한다. 먼저 4.1절에서 우리의 방법론을 설명한 다음
DL 애플리케이션의 세 가지 주요 측면:
• DL 앱의 특징(제4.2조): DL 앱의 인기, 비 DL 앱과의 차이 및 개발자.
• DL의 역할 (제4.3조): 앱에서 널리 사용되는 DL의 사용, DL 앱의 범주 및 DL이 이미 핵심으로 사용되었다는 증거
앱 블록 구성
• DL 프레임워크 분석(제4.4조): 어떤 프레임워크를 사용하는지, 비용 및 시간에 따른 채택 추이.

4.1 방법론: DL 앱 찾기

DL Sniffer는 분석 도구의 일부로 apk 파일을 입력으로 가져가고, 그 중 DL 기법을 사용하는 파일을 출력한다.
DL 사용 감지가 어려운 대신 DL 스니퍼는 주로 Android 지원 기능이 있는 인기 DL 프레임워크의 사용을 감지한다. 현재 DL Sniffer는 TensorFlow, Caffe, TFLite 등 16가지 인기 DL 프레임워크의 탐지를 지원하며, 이러한 프레임워크의 세부사항은 섹션 4.4 & 표 2에 제시될 것이다. DL Sniffer는 두 가지 방법을 사용하여 DL 프레임워크의 사용을 채굴한다: (1) 네이티브 C++ API를 제공하는 사람들을 위해 DL Sniffer가 apk 파일을 먼저 분해한다.ia Apktool [5]에서 기본 공유 라이브러리(접미사 ".so"). 포함)를 추출하십시오. 그런 다음 DL Sniffer는 해당 라이브러리의 lodata 섹션에서 특정 문자열을 검색한다. 그러한 문자열은 해당 프레임워크의 식별자로 간주될 수 있으며, 우리에 의해 사전에 정의된다. 예를 들어, TensorFlow를 사용하는 공유 라이브러리에 항상 "TF_Allocate"가 있는 것을 알 수 있다.그것의 lodata 섹션에 있는 텐서." (2) DL Sniffer는 먼저 apk 파일을 dex2jar [14]를 통해 smali 코드로 변환한다. 안드로이드의 다비크 VM에서 사용하는 DEX 바이너리의 분해된 버전인 smali code는 정적 프로그램 분석을 수행할 수 있게 해준다. DL Sniffer는 smali code의 class/method name을 정적으로 통과하여 특정 API가 존재하는지 확인한다. 예를 들어, MultiLayerConfiguration 클래스는 DeepLearning4J 프레임워크를 포함하는 거의 모든 앱에서 사용된다.

DL 프레임워크의 활용도를 검출하는 것 외에도, 표 2에 기재된 프레임워크를 이용하지 않는 DL 어플리케이션(본 작품에서는 "no lib"라고 한다)도 파악해 본다. 마찬가지로, 이것은 위에서 언급한 대로 네이티브 라이브러리의 로다타 부분에 있는 특정 문자열을 검색함으로써 얻어지지만, 여기서 사용하는 문자열은 기존 프레임워크에서 추출되는 것이 아니라 "신경망", "콘볼루션", "lstm" 등과 같이 사전에 정의되어 있다. 그런 다음 역공학을 통해 검출 정확성을 수동으로 확인하여 DL 사용량이 실제로 없는 것을 필터링(거짓 긍정)한다. 이 수동 점검은 앞서 언급한 접근법을 사용하여 검출된 다른 DL 앱에서도 수행되어 DL 식별의 정확성을 확보한다.

4.2 DL 앱의 특성
• DL이 스마트폰에서 인기를 얻고 있는가? 조사 기간(2018년 6월~2018년 9월)에 걸쳐 총 DL 앱 수는 166개에서 211개로 27.1% 증가했다. 우리는 DL 앱의 새로운 다운로드와 리뷰를 2018년 9월 한 달 안에 더 조사한다. 그 기간 동안 221개의 DL 앱은 약 13만 번 다운로드 받고 960만 건의 새로운 리뷰를 받는다. 그 결과는 오늘날 상당수의 스마트폰이 DL 앱을 실행하고 있다는 것을 보여준다.

• DL 앱이 비DL 앱과 어떻게 다른가?
우리는 다음 세 가지 측면을 조사하며, 그림 2에 예시된 결과를 가지고 있다. 다운로드와 리뷰는 앱의 인기를 대표한다. 관측한 바와 같이 DL 앱의 다운로드와 리뷰의 중간 수는 각각 5000,000건과 41,074건으로 비DL 앱, 즉 각각 10만건과 1,036건보다 훨씬 많다. 우리는 또한 해당 카테고리에 속하는 각 DL 앱의 다운로드 순위를 세어본다. 이 랭킹의 중위수는 각 카테고리별 총 500개 앱 중 89개다. 위의 통계는 상위 앱이 모바일 앱에 DL을 구현하는 조기 채택자라는 강력한 증거로 간주한다. 이러한 현상은 DL을 야생에서 작동시키려면, 매력적이기는 하지만, 많은 공학적 노력이 필요하다는 것을 설명할 수 있다. 스마트폰에서 DL 기능을 개발하는 사이클은 모델 구성, 데이터 수집, 모델 교육, 오프라인/온라인 테스트 등을 포함한다. 따라서, 많은 소규모 회사나 개인 개발자들은 그들의 앱에서 DL을 이용할 수 있는 자원이 부족하다.

등급은 사용자들이 앱에 얼마나 많은 감상을 하는지 보여준다. 그림에는 DL 앱과 비DL 앱이 사용자와 유사한 등급으로 중위수가 4.3인 것으로 나타나 있다.

앱 크기: 그림 2와 같이 DL 앱은 비 DL 앱보다 apk 파일이 훨씬 더 크다(미디어 번호: 35.5MB vs 12.1).이는 DL이 DL 프레임워크와 모델을 앱에 추가하는 것뿐만 아니라 앱의 기능이 훨씬 더 풍부하다는 것을 자신 있게 나타내므로 합리적이다.

• DL 앱 개발자는 누구인가?
우리는 또한 DL 앱의 개발자들을 연구한다. 그 결과 확인된 211개의 DL 앱은 172개의 개발자(회사)에 속하며, 그 중 27개의 개발자가 둘 이상의 DL 앱을 가지고 있다. 대부분의 DL 앱을 가진 개발자는 "Google LLC"(10)와 "Fotoable,Inc"(6)이다. 우리는 많은 대기업들이 구글, 어도비, 페이스북, 카카오, 마이투 등을 포함한 하나 이상의 DL 앱을 소유하고 있는 것을 관찰한다. 이는 이들 대기업들이 DL을 자사 제품에 채택하는 선구자임을 시사한다. 우리는 또한 같은 개발자의 DL 어플리케이션들이 종종 동일한 DL 프레임워크를 가지고 있다는 것을 알아차린다. 예를 들어, Fotoable Inc.의 4개 제품은 DL 기술을 지원하기 위해 libncnn_style.0.2.so이라는 정확히 동일한 네이티브 라이브러리를 사용한다. 이는 DL 프레임워크와 심지어 DL 모델도 쉽게 재사용할 수 있기 때문이다. 즉, 개발자의 엔지니어링 노력을 줄일 수 있는 DL 기법의 좋은 특성이다.


4.3 애플리케이션에서 DL의 역할

• DL의 일반적인 용도는?
DL에서 수행하는 역할을 이해하기 위해 여러 앱에서 DL의 사용을 수동으로 분류한다. 앱 설명과 앱 내용을 살펴봄으로써 이를 실현한다. 그 결과는 표 1에 나와 있다. 각각의 앱은 하나 이상의 사용법을 가지고 있으며, 용도는 서로 다른 두 가지 레벨로 표시된다(간단하고 상세). DL 사용을 확인할 수 없어 10개의 앱이 누락되었다.

전반적으로 이미지 프로세싱은 스마트폰에서 DL을 가장 많이 사용하는 것으로 텍스트 및 오디오 처리(149 대 26 & 24)보다 훨씬 많다. 컴퓨터 비전은 DL이 혁명을 시작하는 분야로서 [68] 이후 이 분야의 발전이 지속되어 왔기 때문에 이것은 놀라운 일이 아니다[76]. 자세한 것은 사진미용(97)과 얼굴검출(52)이 대부분 DL 앱에서 널리 사용되고 있는데, 사진편집이나 사진미화용 카메라 앱에서 주로 찾아볼 수 있다. 텍스트 분야에서는 단어 & 이모지 예측(15)과 자동수정(10)도 인기인데, 보통 GBoard와 같은 입력방식 앱에서 찾아볼 수 있다. 오디오 처리를 위해 DL은 주로 음성 인식(14)에 사용된다. 이외에도 쇼핑 앱에서 흔히 볼 수 있는 추천(11) 등 다른 용도가 있다.


DL 앱은 어떤 범주에서 오나? 그림 3은 서로 다른 범주의 DL 앱 수를 요약한 것이다. 관찰한 바와 같이, 거의 29%의 DL 앱이 카테고리 사진에 있으며, 모두 이미지 처리에 DL을 사용한다. 소셜 카테고리는 총 23개의 DL 앱이 있는 또 다른 핫스팟으로, 이 중 78%는 이미지 처리에 DL을 사용하는 반면 다른 이들은 텍스트, 오디오 등에 사용한다. 생산성의 범주에는 13개의 DL 앱도 포함되어 있지만, 대부분이 텍스트 처리에 DL을 사용한다. 전체적으로 보면 상위 500대 중 11개 카테고리의 DL 앱이 5개 이상이나 되는 등 다소 다양한 DL 활용도를 볼 수 있다. 그러한 다양성은 DL 기법의 좋은 일반성에 기여한다.

의미: 우리의 연구결과는 특정 유형의 앱, 특히 사진미가 있는 앱 개발자들이 DL을 채택하도록 장려한다. 우리의 연구결과는 또한 앱에서 인기 있는 용도에 맞는 상위 수준의 추상화 안에서 DL 알고리즘을 캡슐화하는 동기를 부여한다. 예를 들어 센스타임과 같은 회사들은 이미 DL 기반의 얼굴 탐지 라이브러리를 앱 개발자들에게 발송하기 시작했다. DL 모델과 프레임워크의 세부사항을 가려내면서, 그러한 추상화는 DL을 개발자들에게 더 친근하게 만들 것이다.

DL은 핵심 건물 블록인가? 또한 각 DL 사용량에 핵심 기능 또는 그렇지 않은 것으로 수동으로 태그를 지정한다. (1) 핫: DL 기능은 사용자가 앱을 열고 사용할 때마다 매번 호출될 가능성이 매우 높은 경우에만 DL 기능을 앱의 핵심 기능으로 정의한다. (2) 필수 사항: DL 기능이 없으면 애플리케이션의 주요 기능이 심각하게 손상되거나 심지어 사용할 수 없게 된다. 예를 들어, 텍스트 인식의 DL은 사용자가 이미지를 텍스트로 변환하는 데 도움이 되는 스캐너 앱(Adobe Scan)에서는 핵심 기능으로 취급되지만 ID 카드를 식별하기 위해 스캔하는 결제 앱(Alipay)에서는 취급하지 않는다. 마찬가지로 포토뷰티 DL은 카메라 앱(Meitu)에서는 핵심 기능으로 취급되지만 소셜 앱에서는 다루지 않는다(Facebook Messenger Kids).

전체적으로 211개(81%) 앱 중 171개가 DL을 사용해 핵심 기능을 지원한다. 구체적으로는 포토뷰티(96.9%)와 페이스검출(84.6%)이 주로 포토&카메라 앱에 사용되기 때문에 사용이 필수적이다. 마찬가지로 단어 & 이모지 예측(100%)과 자동 수정(100%)은 키보드 앱에서 핵심 기능으로 취급되어 사용자가 보다 효율적이고 정확하게 입력할 수 있도록 도와준다. 그러나 추천(18.1%)은 쇼핑 앱 등 타인에 대한 보완적 기능으로 제공되기 때문에 핵심 기능으로 취급되지 않는 경우가 많다.

4.4
섹션 2에서 언급했듯이, DL 프레임워크는 DL 채택에 매우 중요하다. 대부분의 개발자들은 이러한 프레임워크를 사용하여 DL 애플리케이션을 구축하기 때문이다. 이 절에서는 이러한 프레임워크가 DL 앱에서 어떻게 사용되는지 조사한다. 숫자, 크기, 연습 등


인기 있는 DL 프레임워크에 대한 개요 먼저 인기 있는 DL 프레임워크에 대한 조사를 하고, 그 결과는 표 2에 요약되어 있다. 우리는 그들의 인기를 위해 21개의 프레임워크를 선택한다. 예를 들어 GitHub의 
포크나 스타들은 StackOverflow와 다른 인터넷 채널에서 주목을 받았다. 그 21개의 프레임워크 중에서, 16개의 프레임워크가 자바(Android의 공식 언어)와/또는 C++(교차 컴파일을 통한 원주민 지원)를 통해 안드로이드 플랫폼을 지원한다. 대부분은 오픈 소스인 반면, 다른 것들은 이진 SDK(SNPE, CoreML)로 대중에게 제공되거나 제공자의 (협업자) 자체 제품(xNN, 앵무새)에 의해서만 접근이 가능하다. 그들 대부분은 모델 파일을 저장하고 표현하기 위해 사용자 정의 형식을 사용하지만, 일부는 프로토Buf[29]와 같은 기존 접근방식을 활용한다. 또한 모바일 앱용으로 특별히 설계되었지만 교육 지원 백엔드(ncnn, FeatherCNN, MACE 등)가 없는 경량 DL 추론 프레임워크에 대한 추세가 눈에 띈다. 이러한 프레임워크는 DL 모델을 훈련시킬 수는 없지만 텐서플로 또는 카페와 같은 다른 프레임워크를 통해 사전 훈련된 모델로 예측할 수 있다. 우리의 이후의 분석은 DL 프레임워크의 개방성에 크게 의존한다는 점에 유의하십시오. 기존 도구를 사용하여 텐서플로 같은 DL 모델을 분석하거나 시각화하거나, ncn과 같은 개방형 코드를 기반으로 분석할 수 있는 자체 해석 스크립트를 구축할 수 있다.

• DL 프레임워크의 채택은? 그림 4에서 요약한 바와 같이 2018년 9월에 가장 많이 사용되는 DL 프레임워크는 총 DL 앱 수의 거의 50%에 기여하기 때문에 TensorFlow(51), TFLite(31), ncnn(28)이다. 다른 인기 있는 틀로는 카페, 앵무새, 그리고 카페2가 있다. 우리는 6개의 지배적인 틀에서 다음과 같은 몇 가지 관찰을 했다.
(1) 이 모든 프레임워크는 대기업(예: 구글), AI 유니콘(예: 센스타임) 또는 유명 대학(예: 버클리)에 의해 개발된다.

(2) 이 6개의 프레임워크 중 5개는 소비자에게 SDK로 제공되는 앵무새를 제외하고 오픈 소스다. 사실 개방성은 [96]을 상정하고 있기 때문에 기계학습, 특히 DL사회에서 이미 중요한 특징이라고 생각된다. 그것은 개발자들이 최첨단 과학 알고리즘을 재현하고 개인 용도에 맞게 커스터마이징하는 것을 돕는다. 그 결과, 예를 들어, TensorFlow는 2018년 10월까지 1,670명 이상의 기부자를 보유하고 있으며, 이는 구글 커뮤니티를 훨씬 능가한다.

(3) Caffe와 TensorFlow를 제외한 대부분의 프레임워크(6개 중 4개)는 스마트폰에 최적화되어 있다. 이러한 모바일 DL 프레임워크는 일반적으로 모바일 기기를 위해 특별히 설계되고 개발된다.
백엔드 교육을 받지 않고도 결과 라이브러리를 보다 빠르고 경량화할 수 있다. 예를 들어, TFLite는 TensorFlow에서 유래하지만 가장자리 장치를 위해 설계되었으며 TensorFlow보다 추론 시간이 낮고 라이브러리 크기가 작다고 보고되었다[110]. 그러한 인기 있는 프레임워크 외에도, 우리는 표 2에서 어떤 프레임워크도 사용하지 않는 34개의 DL 어플리케이션을 식별한다. 이 앱들은 DL 기능을 지원하기 위해 자체 개발한 엔진을 사용한다.

• 모바일 DL 프레임워크가 관심을 끌고 있는가? 그림 4에서 보듯이 TFLite, ncnn 등 스마트폰에 최적화된 DL 프레임워크가 빠르게 인기를 끌고 있다. 즉, TFLite 기반 DL 앱이 12개에서 31개로 늘어났고, ncnn 애플리케이션은 21개에서 28개로 늘었다. 모바일 DL 생태계의 트렌드로 간주되는 고객: 모델을 오프라인으로 교육하려면 개발자 친화성과 기능 완전성에 초점을 맞춘 크고 성숙하며 일반적인 프레임워크를 사용하십시오. 에지 디바이스에 모델을 배포하려면 성능(기준 대기 시간, 메모리 설치 공간 및 라이브러리 크기)에 초점을 맞춘 모바일 지향 프레임워크로 전환하십시오.
모바일 앱의 DL 체크인 및 체크아웃 동작에 대해서도 조사한다. 체크인 DL 앱은 이전 버전(2018년 6월)에서 DL 사용이 없는 앱으로 정의하지만, 새로운 버전(2018년 9월)에서는 DL 사용을 추가하고, 체크아웃은 그 반대로 추가한다. 가장 인기 있는 데이터셋을 기어다니기 때문에 두 데이터셋의 앱 리스트는 동일하지 않지만, 인기는 변하고 있다는 점에 유의하십시오. 따라서 우리는 두 목록에 모두 존재하는 앱(총 11,710개)만을 고려하고, 그 결과를 그림 5로 결론짓는다. 관찰한 바와 같이, 새로운 버전의 190개 DL 앱 중 48개가 2018년 6월에서 2018년 9월 사이에 체크인된다. 우리는 또한 이전 버전에 있는 일부 DL 앱들이 체크아웃을 했지만 그 수는 훨씬 적은 것을 알아차렸다(5). 체크아웃의 이유는 개발자가 해당 기능을 제거하거나 다른 접근방식으로 DL을 교체하기 때문일 수 있다. 전반적으로.
통계는 DL 기법이 모바일 앱에서 점점 더 채택되고 있다는 사실을 뒷받침한다.

• 프레임워크의 스토리지 오버헤드는? 그림 6은 DL libs의 크기, 즉 DL 프레임워크의 물리적 화신을 보여준다. 그림과 같이 DL libs의 평균 크기는 7.5이다.MB, 비 DL libs에 비해 거의 6배 여기서는 DL 앱 내에서 발견되는 비 DL Libs만 사용한다. 그 결과에 따르면 DL libs는 훈련 백엔드 없이 DL 기능을 구현하는 것이 상당히 복잡하기 때문에 일반적으로 비 DL libs보다 무겁다. 다른 프레임워크를 들여다보면, TensorFlow와 Caffe를 사용하면 더 큰 DL libs, 즉 15.3이 된다.MB 및 10.1MB는 각각 5MB 이하인 반면 다른 MB는 모두 5MB 미만이다. 그 이유는 텐서플로 및 카페의 모바일 지원은 원래 프레임워크에서 포팅되어 있으며, 그것들로부터 코드베이스를 실질적으로 재사용하기 때문이다. 그러나 이 두 가지 프레임워크는 분산된 클라우드 DL을 위해 설계된다. 이에 비해 그림 6의 다른 프레임워크는 우수한 성능을 목적으로 모바일 기기를 위해 특별히 설계되었다.


하나의 앱은 여러 개의 DL 프레임워크를 통합할 수 있다. 놀랍게도, 우리는 24개의 DL 앱이 둘 이상의 DL 프레임워크를 포함하고 있다는 것을 발견했다. 예를 들어 중국에서 가장 인기 있는 결제 앱인 알리페이에는 xnn과 ncnn이 모두 들어 있다. 이러한 프레임워크를 동시에 로드해야 할 때 apk 크기와 메모리 풋프린트를 불필요하게 증가시키기 때문에, 우리는 그러한 다중 사용을 (잠재적으로) 나쁜 관행으로 간주한다. 우리의 통계에 따르면, 오버헤드는 5.4이다.MB, 총 apk 크기에 평균 13.6% 기여 대부분의 DL 프레임워크는 상당히 일반적이며 다양한 유형의 DL 모델을 지원할 수 있기 때문에 이러한 오버헤드는 하나의 프레임워크에 기초하여 다른 작업을 실행함으로써 피할 수 있다. 그렇지 않더라도 누락된 형상을 지원하기 위해 쉽게 확장할 수 있다[1]. 이런 다용도 행위의 이유는 두 가지로 나눌 수 있다. 첫째, 하나의 앱은 다른 엔지니어(그룹)에 의해 개발될 수 있으며, 이들은 자신의 DL 목적을 위해 다른 프레임워크를 도입한다. 둘째로, 개발자들은 하나의 DL 구현에서 기존의 코드와 모델을 병합하지 않고 특정 작업에 대해 기존 코드와 모델을 재사용할 수 있다.

의미: 우리의 연구결과는 모바일 DL 프레임워크의 장점과 인기를 강조하여, 그것들에 대한 더 많은 최적화를 장려한다. 우리의 연구 결과는 또한 DL 알고리즘의 화신을 선택할 때 이러한 프레임워크를 우선적으로 고려하도록 애플리케이션 개발자들에게 동기를 부여한다.


5 모델 분석
이 절에서는 DL 기법의 모델 레벨 분석에 초점을 맞춘다.
먼저 방법론 세부사항(예: 5.1절의 모델 추출기 설계)을 설명한다. 그런 다음, 이러한 DL 모델에 대한 분석 결과를 세 가지 주요 측면에서 보여 준다.
• DL 모델의 구조: 사용된 모델 유형, 레이어 유형 및 최적화(섹션 5.2)
• DL 모델의 리소스 설치 공간: 스토리지, 메모리, 실행 복잡성 등(섹션 5.3)
• DL 모델의 보안: 난독화 및 암호화를 사용하여 모델을 도난으로부터 보호(섹션 5.4)
