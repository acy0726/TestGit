#%%
# import packages
import numpy as np
import keras
import time
import os
import pandas as pd
import time
import matplotlib.pyplot as plt
from pandas.tseries.offsets import MonthEnd
from sklearn.preprocessing import MinMaxScaler
from keras.layers import LSTM
from keras.models import Sequential
from keras.layers import Dense
import keras.backend as K
from keras.callbacks import EarlyStopping
# import tensorflowjs as tfjs

## Load dataset
def KNOU_DATA():
    # train
    dataset = pd.read_csv("sample.csv",engine='python')
    max_a = 5184000
    min_a = 1
    min_norm = 0
    max_norm =1
    Xtrn = (dataset.date - min_a) *(max_norm - min_norm) / (max_a-min_a) + min_norm

    Xtrn = Xtrn.values.reshape(-1,1)
    
    Ytrn = pd.get_dummies(dataset.search)  #one hot dataframe
    Ytrn = Ytrn.values

    
    

    # Xtrn = dataset[:,0:1]  # feature
    # Ytrn = dataset[:,1:]  # class label (one-hot representation)
    # test
    # dataset =  pd.read_csv("sample.csv",engine='python')
    # Xtst = dataset[:,0:1]  # feature
    # Ytst = dataset[:,1:]  # class label (one-hot representation)
    Xtst = Xtrn
    Ytst = Ytrn


    return Xtrn, Ytrn, Xtst, Ytst

# Define MLP(2-10-2) using function
def KNOU_MLP():
    x = keras.layers.Input(shape=(1,))  # input: 1 nodes
    h = keras.layers.Activation('relu')(keras.layers.Dense(10)(x))  # hidden: 10 nodes
    y = keras.layers.Activation('softmax')(keras.layers.Dense(10)(h))    # output: 2 nodes
    model = keras.Model(x, y)
    model.compile(loss='categorical_crossentropy', optimizer='SGD', metrics=['accuracy'])
    return model




#%%
model = KNOU_MLP()
Xtrn, Ytrn, Xtst, Ytst = KNOU_DATA()

print(Xtrn.shape)
print(Ytrn.shape)
#%%
# value for model save
tar_path = './RESULT/KNOU_MLP_{}'.format(time.strftime("%y%m%d_%H%M%S", time.localtime()))
os.makedirs(tar_path)    # make directory for saving model
tar_file = tar_path + '/KNOU_MLP_{epoch:03d}_{acc:.4f}_{val_acc:.4f}.h5'
checkpoint = [keras.callbacks.ModelCheckpoint(filepath=tar_file)]

history = model.fit(Xtrn, Ytrn, epochs=1, batch_size=10, callbacks=checkpoint, validation_split=0.2)    # train


# tfjs.converters.save_keras_model(model, './RESULT/')

test_info = model.evaluate(Xtst, Ytst, batch_size=2)        # test
print("Test: Accuracy {:.4}".format(test_info[1]))

yhat = model.predict([[0.99807253]])
print("result {}".format(yhat))



#%%
