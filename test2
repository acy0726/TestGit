
 2. 관련연구
 2.1 Deep Learning Recommendation Model
 현재 딥러닝 모델을 이용한 추천 시스템은 많은 연구가 진행주인데 대부분의 딥러닝 추천 시스템 모델의 아키텍처는 고성능 시스템이 요구되는 워크스테이션에서 이루어지고 있다. 본 논문에서 제시한 클라이언트 
 추천 시스템의 범주형 모델을 추론 해결 하기위해 Embeddings 을 사용하고  
 
 2.2 WEB based deeplearning
 
 
 2.3 browser Databse 



 3. 검색 카테고리 추천 시스템
 이번 장에서는 본 논문에서 제안된 검색 카테고리 추천 시스템을 설명한다. 제안된 시스템은 [[[그림1]]]과 같다. 사용자는 추천 시스템이 구현되어 있는 웹 사이트에 접속하면 검색 카테고리 항목이 자동으로 선택되어 있고 선택된 항목에 따라 검색입력박스에 카테고리 항목이 입력되어 있다. 검색 카테고리 항목과 검색입력박스에 자동으로 값이 선택되는 것은 Tensorflow.js 로 구현된 신경망 모델이 과거의 검색 카테고리 선택 정보를 학습하여 현재의 시간에 선택될 높은 확률의 카테고리를 추천한다. 
 
 3.1 검색 카테고리 정보 저장
 검색 카테고리, 입력박스, search버튼은 HTML 태그로 만들었다. 카테고리는 news, study, job등 총 10가지의 항목으로 구분되어 있다. 사용자는 검색 카테고리를 선택하고 search 버튼을 클릭하면 indexedDB에 현재의 시간정보와 카테고리 정보를 저장한다. [[[그림2]]]의 indexdDB 정보를 보게되면 MyTestDatabase 데이터베이스가 생성된것을 알 수 있다. MyTestDatabase는 myTable이라는 이름의 테이블을 가지고 있으며 time, category, etc 총 3개의 칼럼을 가지고 있다, time 칼럼은 시간정보를 하루 24시간을 기준으로 0~1 사이의 값으로 Normalization 하였고 category 칼럼은 총 10개의 카테고리 값을 0~9 사이의 인덱스 값으로 저장 하였다. etc 칼럼은 예비 칼럼으로 만들었다.
 
 3.2 신경망 학습
 tesorflow.js로 구현된 신경망은 indexdDB에 저장된 시간정보와 카테고리정보를 학습후 카테고리를 추천한다. indexdDB에서 제공하는 Cursor 객체를 통해 테이블 기준으로 저장된 데이터를 조회 할 수 있다. time 칼럼의 데이터는 0~1 사이의 float 형태의 데이터 타입으로 신경망 학습의 X 값으로 사용되고, category 칼럼의 데이터는 0~9의 int형 데이터 타입으로 one-hot encoding을 적용하여 신경망 학습의 레이블 값 Y로 적용하였다. 신경망 모델의 네트워크 구성은 4개의 레이어로 구성하였다. 입력계층은 time 데이터 1개를 입력 할 수 있는 노드로 구성하였고 은닉계층은 Relu 활성화 함수를 적용한 2개의 노드, 출력계층은 10가지의 항목을 가진 카테고리 값을 출력하기 위한 softmax 노드로 구성하였다. 옵티마이저는 RMSProp 으로 사용하였으며 손실함수는 Categorical_Crossentropy로 사용하였다. epoch의 값은 10이고 batchSize는 10이다.
 
 4. 실험
 본 논문에서 제안한 시스템의 성능 평가를 위해 Desktop(PC)과 스마트폰으로 진행하였다. Desktop의 환경은 OS:윈도우 10 프로페셔널, CPU: AMD ryzen2600x, GPU nvida gtx1060 이고 스마트폰은 GALAXY S8, OS:Android 9 버전이다. Desktop 환경에서의 웹 브라우저는 Chrome 76.0 버전과 FireFox 3.0 버전을 사용하였고, 스마트폰 환경에서 브라우저는 삼성 브라우저 9.4 버전을 사용하였다. 2개의 디바이스와 3개의 브라우저 환경에서 진행하는 이유는 Tensorflow.js, IndexedDB가 정식으로 크로스플랫폼을 지원되는지에 대한 실험이 필요하다. 학습데이터는 100개의 검색 카테고리 정보를 각각의 브라우저 indexdDB에 등록 하였다. 등록 방법은 Desktop과 스마트폰 브라우저에서 구현된 검색 카테고리 시스템의 카테고리 선택 화면에서 카테고리를 임의로 선택하여 search버튼을 클릭하여 등록 하였다. 등록 시점의 시간은 2-3초 간격과 몇시간 이후의 간격으로 등록 하였다.
 
 5. 결론
 본 논문에서는 웹 사이트 사용자의 검색 카테고리 정보와 시간정보를 IndexedDB에 저장하고 저장된 검색 카테로그 정보를 조회하여 딥러닝 모델을 통해 학습을 하여 검색 카테고리를 추천하는 시스템을 제안 하였다.
 
 
