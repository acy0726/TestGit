<!doctype html>
<html>
<head>
    <title>TF.js Test</title>
    <!-- 
    <script src="tf-layers.js"></script>
    <script src="tf-core.js"></script>
    <script src="tf.js"></script>
    -->
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.0/dist/tf.min.js"></script>
    <script type="text/javascript">
    
    
	    const DB_NAME = 'MyTestDatabase';
	    const DB_VERSION = 3; // Use a long long for this value (don't use a float)
	    const DB_STORE_NAME = 'tests';
	    var db;
	    var request = indexedDB.open(DB_NAME,DB_VERSION);
	    
	    request.onerror = function(event) {
	      alert("Why didn't you allow my web app to use IndexedDB?!");
	    };
	    request.onsuccess = function(event) {
	    	db = request.result;
	        console.log("openDb DONE");
	    };
	    
	    
	    request.onupgradeneeded = function(event) { 
	   	  // Save the IDBDatabase interface 
	   	  
	   	  db = event.target.result;
	   	  // Create an objectStore for this database
	   	  var objectStore = db.createObjectStore(DB_STORE_NAME, { keyPath: 'id', autoIncrement: true });
	      objectStore.createIndex("xs", "xs", { unique: false });
	      objectStore.createIndex("ys", "ys", { unique: false });
	   	};
	    
	   	
	   	function getObjectStore(store_name, mode) {
	   	    var tx = db.transaction(store_name, mode);
	   	    return tx.objectStore(store_name);
	   	}
	    
	   	function adds(){
	   		
		    var store = getObjectStore(DB_STORE_NAME,'readwrite');
		    
		    req = store.add({xs:'1',ys:'2'});
		    
		    req.onsuccess = function (evt) {
		        console.log("Insertion in DB successful");
		      };
		      req.onerror = function() {
		        console.error("addPublication error", this.error);
		        displayActionFailure(this.error);
		      };
	   	}
	   	
	   	
	   	function lists(){
	   		store = getObjectStore(DB_STORE_NAME, 'readonly');
	   		//req = store.count();
	   		
	   		req = store.openCursor();
	   	    req.onsuccess = function(evt) {
	   	      var cursor = evt.target.result;
	   	      // If the cursor is pointing at something, ask for the data
	   	      if (cursor) {
	   	        console.log("displayPubList cursor:", cursor);
	   	        req = store.get(cursor.key);
	   	        req.onsuccess = function (evt) {
	   	          var value = evt.target.result;
		   	       console.log("xs :", value.xs);
		   	  	   console.log("ys :", value.ys);
	   	        };
	   	        // Move on to the next object in store
	   	        cursor.continue();
	   	        // This counter serves only to create distinct ids
	   	      } else {
	   	        console.log("No more entries");
	   	      }
	   	    };
	   		
	   	}
	   	
	   	
        // 선형회귀 모델 생성
        const model = tf.sequential();
        model.add(tf.layers.dense({units: 1, inputShape: [1]}));
 
        // 학습을 위한 준비 : 손실 함수와 최적화 함수를 설정
        model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
 
        // 학습 데이터 생성
        const xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);
        const ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);
 
        // 데이터를 사용해서 학습
        model.fit(xs, ys).then(() => {
            // 학습된 모델을 가지고 추론
            model.predict(tf.tensor2d([5], [1, 1])).print();

        });
    </script>
</head>
<body>
    <input type="button" id="" value="경제" onclick="adds()" />
    <input type="button" id="" value="list" onclick="lists()" />
</body>
</html>
